API is application programming interface
it act as 2 way communication bridge between frontend and backend



REST API stands for Representational State Transfer API.

It is a specific type of Web API that follows REST principles. These are:

Stateless — each request is independent.

Uses HTTP methods:

GET: Retrieve data

POST: Create new data

PUT/PATCH: Update existing data

DELETE: Remove data

Works with resources — identified via URLs (like api/users/5)

Usually returns data in JSON format

The core principles of REST API are 
Stateless:- server doesn't store any information about client between requests
Client Server architecture:- client asks for data and server does what's the requested
Standardized interface:- it rely on set of standard methods (GET,POST,PUT,DELETE)
                    GET:- retrieving the resource
                    POST:- creating the resource
                    PUT:- updating the resource
                    DELETE:- deleting the resource
Easy to Read:- typically json or XML formate



| API Type               | Description                                                                |
| ---------------------- | -------------------------------------------------------------------------- |
| **SOAP**               | Old, XML-based protocol with strict rules and WSDL contracts               |
| **GraphQL**            | Lets client ask for exactly what data they need, often replacing REST      |
| **gRPC**               | High-performance RPC framework by Google, uses Protocol Buffers (not JSON) |
| **WebSockets**         | Real-time, two-way communication between client and server                 |
| **JSON-RPC / XML-RPC** | Lightweight alternatives using JSON or XML for remote procedure calls      |
| **OpenAPI / Swagger**  | Specification and tools to document and interact with REST APIs            |



To make **simple** django project use
django-admin startproject NAME .
dot is important

To run server use this command 
python manage.py runserver

To Create new app
python manage.py startapp APPNAME

To create super user
python manage.py createsuperuser 
this is the only command and then django will guid you to create super user

for changing the password
python manage.py changepassword YOUR_USER_NAME

for creating tables
python manage.py makemigrations


django use mvt(model view template) software design pattern
this model is responsible for each and every database operation
want to do anything related to database then contact this database

template is basically the user facing layout

views work as the bridge between model and template
views tells the model that i need something please give me
now model fill get that data and give that to the views
and views than pass that data to template where user can see it


difference between django-admin startproject myproject and python manage.py startapp blog this commands
| Command                               | What It Creates | Is It an App? | Purpose                                |
| ------------------------------------- | --------------- | ------------- | -------------------------------------- |
| `django-admin startproject myproject` | Project folder  | ❌ No          | Global project settings and structure  |
| `python manage.py startapp blog`      | App folder      | ✅ Yes         | Actual app logic (views, models, etc.) |


